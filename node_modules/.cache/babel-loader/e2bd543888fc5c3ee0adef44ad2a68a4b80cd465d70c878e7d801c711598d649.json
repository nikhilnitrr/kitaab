{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nconst sign = require(\"jwt-encode\");\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\n\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, email, password}\r\n * */\n\nexport const signupHandler = function (schema, request) {\n  const {\n    email,\n    password,\n    ...rest\n  } = JSON.parse(request.requestBody);\n  try {\n    // check if email already exists\n    const foundUser = schema.users.findBy({\n      email\n    });\n    if (foundUser) {\n      return new Response(422, {}, {\n        errors: [\"Unprocessable Entity. Email Already Exists.\"]\n      });\n    }\n    const _id = uuid();\n    const newUser = {\n      _id,\n      email,\n      password,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      ...rest,\n      cart: [],\n      wishlist: []\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign({\n      _id,\n      email\n    }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, {\n      createdUser,\n      encodedToken\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {email, password}\r\n * */\n\nexport const loginHandler = function (schema, request) {\n  const {\n    email,\n    password\n  } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({\n      email\n    });\n    if (!foundUser) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n    if (password === foundUser.password) {\n      const encodedToken = sign({\n        _id: foundUser._id,\n        email\n      }, process.env.REACT_APP_JWT_SECRET);\n      foundUser.password = undefined;\n      return new Response(200, {}, {\n        foundUser,\n        encodedToken\n      });\n    }\n    return new Response(401, {}, {\n      errors: [\"The credentials you entered are invalid. Unauthorized access error.\"]\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","email","password","rest","JSON","parse","requestBody","foundUser","users","findBy","errors","_id","newUser","createdAt","updatedAt","cart","wishlist","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler","undefined"],"sources":["/Users/nichandr/NEOG/e-commerce/kitaab/src/backend/controllers/AuthController.js"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\r\nimport { Response } from \"miragejs\";\r\nimport { formatDate } from \"../utils/authUtils\";\r\nconst sign = require(\"jwt-encode\");\r\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\r\n\r\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, email, password}\r\n * */\r\n\r\nexport const signupHandler = function (schema, request) {\r\n  const { email, password, ...rest } = JSON.parse(request.requestBody);\r\n  try {\r\n    // check if email already exists\r\n    const foundUser = schema.users.findBy({ email });\r\n    if (foundUser) {\r\n      return new Response(\r\n        422,\r\n        {},\r\n        {\r\n          errors: [\"Unprocessable Entity. Email Already Exists.\"],\r\n        }\r\n      );\r\n    }\r\n    const _id = uuid();\r\n    const newUser = {\r\n      _id,\r\n      email,\r\n      password,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n      ...rest,\r\n      cart: [],\r\n      wishlist: [],\r\n    };\r\n    const createdUser = schema.users.create(newUser);\r\n    const encodedToken = sign({ _id, email }, process.env.REACT_APP_JWT_SECRET);\r\n    return new Response(201, {}, { createdUser, encodedToken });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {email, password}\r\n * */\r\n\r\nexport const loginHandler = function (schema, request) {\r\n  const { email, password } = JSON.parse(request.requestBody);\r\n  try {\r\n    const foundUser = schema.users.findBy({ email });\r\n    if (!foundUser) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The email you entered is not Registered. Not Found error\"] }\r\n      );\r\n    }\r\n    if (password === foundUser.password) {\r\n      const encodedToken = sign(\r\n        { _id: foundUser._id, email },\r\n        process.env.REACT_APP_JWT_SECRET\r\n      );\r\n      foundUser.password = undefined;\r\n      return new Response(200, {}, { foundUser, encodedToken });\r\n    }\r\n    return new Response(\r\n      401,\r\n      {},\r\n      {\r\n        errors: [\r\n          \"The credentials you entered are invalid. Unauthorized access error.\",\r\n        ],\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}